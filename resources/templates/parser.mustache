/**
 * Author José Albert Cruz Almaguer <jalbertcruz@gmail.com>
 * Copyright 2015 by José Albert Cruz Almaguer.
 * <p>
 * This program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http:www.gnu.org/licenses/agpl-3.0.txt) for more details.
 */

package {{langName}}.compiler.syntax_analyzer;

import java.util.Set;

import compiler.abstract_syntax_tree.AST;
import compiler.errors.ErrorReporter;
import compiler.errors.SyntacticError;
import compiler.lexical_analyzer.LexicalAnalyzer;
import compiler.syntax_analyzer.SyntaxAnalyzer;

import static {{tokensTypeName}}.*;

public class Parser extends SyntaxAnalyzer<{{tokensTypeName}}, AST> {

        {{#first-sets-values}}
         private Set<{{tokensTypeName}}> first{{name}};
        {{/first-sets-values}}


        public Parser(LexicalAnalyzer<{{tokensTypeName}}> in, ErrorReporter er) {
            super(in, er);

            {{#first-sets-values}}
            first{{name}} = mkFirsts({{tokens}});
            {{/first-sets-values}}

        }

        @Override
        public AST parse() {
            consume();
            {{S}}();
            match(EOT);
            return null;
        }

        {{#productions}}
        // {{name}} -> {{rightParts}};
        public Object {{name}}() {
            int productionSelected = selectProduction({{firsts-values}});
            switch (productionSelected) {
            {{#firsts}}
                case {{i}}:
                {{#symbols}}

                    {{#is-token}}
                    match({{name}});
                    {{/is-token}}
                    {{^is-token}}
                    {{name}}();
                    {{/is-token}}

                {{/symbols}}
                    break;
              {{/firsts}}

            {{^epsilon}}
                default:
                    er.add(new SyntacticError(ct.line));
            {{/epsilon}}
            }
            return null;
        }

        {{/productions}}

}
